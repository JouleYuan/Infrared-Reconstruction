# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import reconstruction_pb2 as reconstruction__pb2


class ReconstructionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SfM = channel.unary_unary(
                '/reconstruction.Reconstruction/SfM',
                request_serializer=reconstruction__pb2.SfMRequest.SerializeToString,
                response_deserializer=reconstruction__pb2.SfMReply.FromString,
                )
        self.MVS = channel.unary_unary(
                '/reconstruction.Reconstruction/MVS',
                request_serializer=reconstruction__pb2.MVSRequest.SerializeToString,
                response_deserializer=reconstruction__pb2.MVSReply.FromString,
                )
        self.Texture = channel.unary_unary(
                '/reconstruction.Reconstruction/Texture',
                request_serializer=reconstruction__pb2.TextureRequest.SerializeToString,
                response_deserializer=reconstruction__pb2.TextureReply.FromString,
                )


class ReconstructionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SfM(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MVS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Texture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReconstructionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SfM': grpc.unary_unary_rpc_method_handler(
                    servicer.SfM,
                    request_deserializer=reconstruction__pb2.SfMRequest.FromString,
                    response_serializer=reconstruction__pb2.SfMReply.SerializeToString,
            ),
            'MVS': grpc.unary_unary_rpc_method_handler(
                    servicer.MVS,
                    request_deserializer=reconstruction__pb2.MVSRequest.FromString,
                    response_serializer=reconstruction__pb2.MVSReply.SerializeToString,
            ),
            'Texture': grpc.unary_unary_rpc_method_handler(
                    servicer.Texture,
                    request_deserializer=reconstruction__pb2.TextureRequest.FromString,
                    response_serializer=reconstruction__pb2.TextureReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'reconstruction.Reconstruction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reconstruction(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SfM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reconstruction.Reconstruction/SfM',
            reconstruction__pb2.SfMRequest.SerializeToString,
            reconstruction__pb2.SfMReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MVS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reconstruction.Reconstruction/MVS',
            reconstruction__pb2.MVSRequest.SerializeToString,
            reconstruction__pb2.MVSReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Texture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reconstruction.Reconstruction/Texture',
            reconstruction__pb2.TextureRequest.SerializeToString,
            reconstruction__pb2.TextureReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
